---
export const prerender = false;
import { getSecret } from "astro:env/server";
import Head from "@/components/Head.astro";
import ArticlePage from "@/components/article/articlePage.astro";
import Layout from "@/layouts/Layout.astro";
import { getUnpublishedArticleByTitle } from "@/libs/article.ts";
import type { Article } from "@/types/Article";
import { GraphQLClient } from "graphql-request";

// URLからtitleパラメータを取得
const title = Astro.url.searchParams.get("title");
if (title === null) {
  return Astro.redirect("/");
}

console.log("title: ", title);

// const githubToken = getSecret("GITHUB_TOKEN");
// if (!githubToken) {
//   throw new Error("GITHUB_TOKEN is not set");
// }

const GITHUB_TOKEN = getSecret("GITHUB_TOKEN");

async function testGitHubApiAuth() {
  try {
    const client = new GraphQLClient("https://api.github.com/graphql", {
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`, // GITHUB_TOKEN がここでも正しく参照できる前提
      },
    });
    const query = "query { viewer { login } }";
    console.log(
      "Testing with simple query, Token starts with:",
      GITHUB_TOKEN ? GITHUB_TOKEN.substring(0, 4) : "undefined",
    );
    const data: { viewer: { login: string } } = await client.request(query);
    console.log("Simple query successful. Viewer login:", data.viewer.login);
  } catch (error: any) {
    console.error("Error in simple query test:", error.message);
    if (error.response) {
      console.error(
        "Simple Query - GraphQL API Response Status:",
        error.response.status,
      );
      console.error(
        "Simple Query - GraphQL API Response Headers:",
        JSON.stringify(error.response.headers, null, 2),
      );
      console.error(
        "Simple Query - GraphQL API Response Errors/Data:",
        JSON.stringify(error.response.errors || error.response.data, null, 2),
      );
    }
  }
}

await testGitHubApiAuth()

let article: Article | undefined;
try {
  article = await getUnpublishedArticleByTitle(title);
  if (article === undefined) {
    return Astro.redirect("/");
  }
} catch (error: any) {
  console.error("Error fetching article raw message: ", error.message);
  if (error.response) {
    console.error("GraphQL API Response Status:", error.response.status); // これは403のはず
    console.error(
      "GraphQL API Response Headers:",
      JSON.stringify(error.response.headers, null, 2),
    );
    // GitHub APIは通常、エラー詳細を `errors` 配列または `data` オブジェクト内で返す
    console.error(
      "GraphQL API Response Errors/Data:",
      JSON.stringify(error.response.errors || error.response.data, null, 2),
    );
  }
  if (error.request) {
    console.error("GraphQL API Request Query:", error.request.query);
    console.error(
      "GraphQL API Request Variables:",
      JSON.stringify(error.request.variables, null, 2),
    );
  }
  return Astro.redirect("/");
}

const path = "/preview";
---

<Layout>
  <Head
    slot="head"
    title={article ? `${article.title} (プレビュー)` : "プレビュー"}
    description={article ? article.description : "記事プレビュー"}
    contentType="article"
    path={path}
  />
  <main>
      <ArticlePage article={article} />
  </main>
</Layout>
